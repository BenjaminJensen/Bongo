
genvex_emulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bb  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bb  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d6  00000000  00000000  000010c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000128  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int main(void)
{
	// PD 2,3,4 output
	// PD5 input
	DDRD = 0b00011100;
  90:	8c e1       	ldi	r24, 0x1C	; 28
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00100000;
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	8b b9       	out	0x0b, r24	; 11
	
	PORTD |= 0b00011100;
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	8c 61       	ori	r24, 0x1C	; 28
  9c:	8b b9       	out	0x0b, r24	; 11

	uint8_t state = 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	32 e0       	ldi	r19, 0x02	; 2
	if(cur == 0)
		cur = 1;
	else if(cur == 1)
		cur = 3;
	else if(cur == 3)
		cur = 7;
  a2:	57 e0       	ldi	r21, 0x07	; 7
	PORTD &= 0b11100011;
	
	if(cur == 0)
		cur = 1;
	else if(cur == 1)
		cur = 3;
  a4:	43 e0       	ldi	r20, 0x03	; 3
	static uint8_t cur = 0;
	
	PORTD &= 0b11100011;
	
	if(cur == 0)
		cur = 1;
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	05 c0       	rjmp	.+10     	; 0xb4 <main+0x24>
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <main+0x24>
  ae:	82 2f       	mov	r24, r18
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <main+0x24>
  b2:	83 2f       	mov	r24, r19
	
    /* Replace with your application code */
    while (1) 
    {
		
		switch(state) {
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	c9 f1       	breq	.+114    	; 0x12a <main+0x9a>
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	09 f4       	brne	.+2      	; 0xbe <main+0x2e>
  bc:	41 c0       	rjmp	.+130    	; 0x140 <main+0xb0>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	59 f0       	breq	.+22     	; 0xd8 <main+0x48>
			case 0:
				if((PIND & (1 << PIND5)) == 0) {
  c2:	4d 99       	sbic	0x09, 5	; 9
  c4:	f2 cf       	rjmp	.-28     	; 0xaa <main+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	6f ef       	ldi	r22, 0xFF	; 255
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	61 50       	subi	r22, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x3c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x46>
  d6:	00 00       	nop
					state = 1;	
					_delay_ms(40);
				}
				break;
			case 1:
				if((PIND & (1 << PIND5)) ==  0) {
  d8:	4d 99       	sbic	0x09, 5	; 9
  da:	e9 cf       	rjmp	.-46     	; 0xae <main+0x1e>
}

static void update_output() {
	static uint8_t cur = 0;
	
	PORTD &= 0b11100011;
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	83 7e       	andi	r24, 0xE3	; 227
  e0:	8b b9       	out	0x0b, r24	; 11
	
	if(cur == 0)
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	81 11       	cpse	r24, r1
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <main+0x60>
		cur = 1;
  ea:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  ee:	0c c0       	rjmp	.+24     	; 0x108 <main+0x78>
	else if(cur == 1)
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	19 f4       	brne	.+6      	; 0xfa <main+0x6a>
		cur = 3;
  f4:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
  f8:	07 c0       	rjmp	.+14     	; 0x108 <main+0x78>
	else if(cur == 3)
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	19 f4       	brne	.+6      	; 0x104 <main+0x74>
		cur = 7;
  fe:	50 93 00 01 	sts	0x0100, r21	; 0x800100 <_edata>
 102:	02 c0       	rjmp	.+4      	; 0x108 <main+0x78>
	else 
		cur = 0;
 104:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	PORTD |= (cur & 0x07) << 2;
 108:	9b b1       	in	r25, 0x0b	; 11
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	87 70       	andi	r24, 0x07	; 7
 110:	88 0f       	add	r24, r24
 112:	88 0f       	add	r24, r24
 114:	89 2b       	or	r24, r25
 116:	8b b9       	out	0x0b, r24	; 11
 118:	6f ef       	ldi	r22, 0xFF	; 255
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	61 50       	subi	r22, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x8e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x98>
 128:	00 00       	nop
					update_output();
					_delay_ms(40);
				}
				break;
			case 2:
				if((PIND & (1 << PIND5)) == (1 << PIND5)  ) {
 12a:	4d 9b       	sbis	0x09, 5	; 9
 12c:	c2 cf       	rjmp	.-124    	; 0xb2 <main+0x22>
 12e:	6f ef       	ldi	r22, 0xFF	; 255
 130:	89 ef       	ldi	r24, 0xF9	; 249
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	61 50       	subi	r22, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0xa4>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xae>
 13e:	00 00       	nop
					state = 3;
					_delay_ms(40);
				}
				break;
			case 3:
				if((PIND & (1 << PIND5)) == (1 << PIND5)  ) {
 140:	4d 99       	sbic	0x09, 5	; 9
 142:	bf cf       	rjmp	.-130    	; 0xc2 <main+0x32>
 144:	fd cf       	rjmp	.-6      	; 0x140 <main+0xb0>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
